{"version":3,"sources":["webpack:///./pages/functions.js?34ea"],"names":["makeCountObject","countObj","i","push","makeBoard","puzzle","rows","Array","from","keys","map","columns","squares","result","row","cell","j","Math","floor","value","prefilled","fromJS","selected","choices","updateBoardWithNumber","x","y","number","fill","board","get","getIn","delete","set","increment","rowPath","columnPath","squarePath","setIn","selectCell"],"mappings":"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","file":"3.04e6a1eb8377b1803ada.hot-update.js","sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable react/jsx-indent-props */\n/* eslint-disable no-mixed-operators */\n/* eslint-disable no-mixed-spaces-and-tabs */\n/* eslint-disable arrow-parens */\n/* eslint-disable react/jsx-indent */\n/* eslint-disable object-curly-newline */\n/* eslint-disable indent */\n/* eslint-disable no-tabs */\n/* eslint-disable jsx-a11y/accessible-emoji */\n\nimport { fromJS } from 'immutable';\n\n/**\n * make size 9 array of 0s\n * @returns {Array}\n */\nfunction makeCountObject() {\n\tconst countObj = [];\n\tfor (let i = 0; i < 10; i += 1) countObj.push(0);\n\treturn countObj;\n}\n\n/**\n * given a 2D array of numbers as the initial puzzle, generate the initial game state\n * @param puzzle\n * @returns {any}\n */\nexport function makeBoard({ puzzle }) {\n\t// create initial count object to keep track of conflicts per number value\n\tconst rows = Array.from(Array(9).keys()).map(() => makeCountObject());\n\tconst columns = Array.from(Array(9).keys()).map(() => makeCountObject());\n\tconst squares = Array.from(Array(9).keys()).map(() => makeCountObject());\n\tconst result = puzzle.map((row, i) =>\n\t\trow.map((cell, j) => {\n\t\t\tif (cell) {\n\t\t\t\trows[i][cell] += 1;\n\t\t\t\tcolumns[j][cell] += 1;\n\t\t\t\tsquares[Math.floor(i / 3) * 3 + Math.floor(j / 3)][cell] += 1;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tvalue: puzzle[i][j] > 0 ? puzzle[i][j] : null,\n\t\t\t\tprefilled: !!puzzle[i][j],\n\t\t\t};\n\t\t})\n\t);\n\treturn fromJS({ puzzle: result, selected: false, choices: { rows, columns, squares } });\n}\n\n/**\n * give the coordinate update the current board with a number choice\n * @param x\n * @param y\n * @param number\n * @param fill whether to set or unset\n * @param board the immutable board given to change\n */\nexport function updateBoardWithNumber({ x, y, number, fill = true, board }) {\n\tlet cell = board.get('puzzle').getIn([x, y]);\n\t// delete its notes\n\tcell = cell.delete('notes');\n\t// set or unset its value depending on `fill`\n\tcell = fill ? cell.set('value', number) : cell.delete('value');\n\tconst increment = fill ? 1 : -1;\n\t// update the current group choices\n\tconst rowPath = ['choices', 'rows', x, number];\n\tconst columnPath = ['choices', 'columns', y, number];\n\tconst squarePath = ['choices', 'squares', Math.floor(x / 3) * 3 + Math.floor(y / 3), number];\n\treturn board\n\t\t.setIn(rowPath, board.getIn(rowPath) + increment)\n\t\t.setIn(columnPath, board.getIn(columnPath) + increment)\n\t\t.setIn(squarePath, board.getIn(squarePath) + increment)\n\t\t.setIn(['puzzle', x, y], cell);\n}\n\nexport function selectCell(board, x, y) {\n\treturn board.set('selected', { x, y });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./pages/functions.js"],"sourceRoot":""}