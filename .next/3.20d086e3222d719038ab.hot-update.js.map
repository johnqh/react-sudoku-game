{"version":3,"sources":["webpack:///./pages/functions.js?34ea"],"names":["makeCountObject","countObj","i","push","makeBoard","puzzle","rows","Array","from","keys","map","columns","squares","result","row","cell","j","Math","floor","value","prefilled","fromJS","selected","choices","updateBoardWithNumber","x","y","number","fill","board","get","getIn","delete","set","increment","rowPath","columnPath","squarePath","setIn","selectCell","isConflict","toJSON","rowConflict","columnConflict","squareConflict","fillNumber","oldBoard","selectedCell","currentValue","setNumber","fillSelectedWithSolution","solution","addNumberAsNote","oldSelectedCell","state","getSelectedCell","notes","Set","has","add","updateBoard","getNumberOfGroupsAssignedForNumber","groups","reduce","accumulator","getNumberValueCount","min","generateGame","finalCount","console","log","makePuzzle","pluck","history","List","of","historyOffSet"],"mappings":"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","file":"3.20d086e3222d719038ab.hot-update.js","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-indent-props */\n/* eslint-disable no-mixed-operators */\n/* eslint-disable no-mixed-spaces-and-tabs */\n/* eslint-disable arrow-parens */\n/* eslint-disable react/jsx-indent */\n/* eslint-disable object-curly-newline */\n/* eslint-disable indent */\n/* eslint-disable no-tabs */\n/* eslint-disable jsx-a11y/accessible-emoji */\n\nimport { List, fromJS } from 'immutable';\n\nimport { makePuzzle, pluck } from '../sudoku';\n\n/**\n * make size 9 array of 0s\n * @returns {Array}\n */\nfunction makeCountObject() {\n\tconst countObj = [];\n\tfor (let i = 0; i < 10; i += 1) countObj.push(0);\n\treturn countObj;\n}\n\n/**\n * given a 2D array of numbers as the initial puzzle, generate the initial game state\n * @param puzzle\n * @returns {any}\n */\nexport function makeBoard({ puzzle }) {\n\t// create initial count object to keep track of conflicts per number value\n\tconst rows = Array.from(Array(9).keys()).map(() => makeCountObject());\n\tconst columns = Array.from(Array(9).keys()).map(() => makeCountObject());\n\tconst squares = Array.from(Array(9).keys()).map(() => makeCountObject());\n\tconst result = puzzle.map((row, i) =>\n\t\trow.map((cell, j) => {\n\t\t\tif (cell) {\n\t\t\t\trows[i][cell] += 1;\n\t\t\t\tcolumns[j][cell] += 1;\n\t\t\t\tsquares[Math.floor(i / 3) * 3 + Math.floor(j / 3)][cell] += 1;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tvalue: puzzle[i][j] > 0 ? puzzle[i][j] : null,\n\t\t\t\tprefilled: !!puzzle[i][j],\n\t\t\t};\n\t\t})\n\t);\n\treturn fromJS({ puzzle: result, selected: false, choices: { rows, columns, squares } });\n}\n\n/**\n * give the coordinate update the current board with a number choice\n * @param x\n * @param y\n * @param number\n * @param fill whether to set or unset\n * @param board the immutable board given to change\n */\nexport function updateBoardWithNumber({ x, y, number, fill = true, board }) {\n\tlet cell = board.get('puzzle').getIn([x, y]);\n\t// delete its notes\n\tcell = cell.delete('notes');\n\t// set or unset its value depending on `fill`\n\tcell = fill ? cell.set('value', number) : cell.delete('value');\n\tconst increment = fill ? 1 : -1;\n\t// update the current group choices\n\tconst rowPath = ['choices', 'rows', x, number];\n\tconst columnPath = ['choices', 'columns', y, number];\n\tconst squarePath = ['choices', 'squares', Math.floor(x / 3) * 3 + Math.floor(y / 3), number];\n\treturn board\n\t\t.setIn(rowPath, board.getIn(rowPath) + increment)\n\t\t.setIn(columnPath, board.getIn(columnPath) + increment)\n\t\t.setIn(squarePath, board.getIn(squarePath) + increment)\n\t\t.setIn(['puzzle', x, y], cell);\n}\n\nexport function selectCell(board, x, y) {\n\treturn board.set('selected', { x, y });\n}\n\nexport function isConflict(board, i, j) {\n\tconst { value } = board.getIn(['puzzle', i, j]).toJSON();\n\tif (!value) return false;\n\tconst rowConflict = board.getIn(['choices', 'rows', i, value]) > 1;\n\tconst columnConflict = board.getIn(['choices', 'columns', j, value]) > 1;\n\tconst squareConflict = board.getIn(['choices', 'squares', Math.floor(i / 3) * 3 + Math.floor(j / 3), value]) > 1;\n\treturn rowConflict || columnConflict || squareConflict;\n}\n\nexport function fillNumber(oldBoard, selectedCell, number) {\n\tlet board = oldBoard;\n\t// no-op if nothing is selected\n\tif (!selectedCell) return;\n\tconst prefilled = selectedCell.get('prefilled');\n\t// no-op if it is refilled\n\tif (prefilled) return;\n\tconst { x, y } = board.get('selected');\n\tconst currentValue = selectedCell.get('value');\n\t// remove the current value and update the game state\n\tif (currentValue) {\n\t\tboard = updateBoardWithNumber({\n\t\t\tx,\n\t\t\ty,\n\t\t\tnumber: currentValue,\n\t\t\tfill: false,\n\t\t\tboard,\n\t\t});\n\t}\n\t// update to new number if any\n\tconst setNumber = currentValue !== number && number;\n\tif (setNumber) {\n\t\tboard = updateBoardWithNumber({\n\t\t\tx,\n\t\t\ty,\n\t\t\tnumber,\n\t\t\tfill: true,\n\t\t\tboard,\n\t\t});\n\t}\n\treturn board;\n}\n\nexport function fillSelectedWithSolution(board, solution, selectedCell) {\n\tif (!selectedCell) return;\n\tconst { x, y } = board.get('selected');\n\treturn solution[x][y];\n}\n\nexport function addNumberAsNote(oldBoard, oldSelectedCell, number) {\n\tlet { board } = this.state;\n\tlet selectedCell = this.getSelectedCell();\n\n\tif (!selectedCell) return;\n\tconst prefilled = selectedCell.get('prefilled');\n\tif (prefilled) return;\n\tconst { x, y } = board.get('selected');\n\tconst currentValue = selectedCell.get('value');\n\tif (currentValue) {\n\t\tboard = updateBoardWithNumber({\n\t\t\tx,\n\t\t\ty,\n\t\t\tnumber: currentValue,\n\t\t\tfill: false,\n\t\t\tboard: this.state.board,\n\t\t});\n\t}\n\tlet notes = selectedCell.get('notes') || Set();\n\tif (notes.has(number)) {\n\t\tnotes = notes.delete(number);\n\t} else {\n\t\tnotes = notes.add(number);\n\t}\n\tselectedCell = selectedCell.set('notes', notes);\n\tselectedCell = selectedCell.delete('value');\n\tboard = board.setIn(['puzzle', x, y], selectedCell);\n\tthis.updateBoard(board);\n}\n\nfunction getNumberOfGroupsAssignedForNumber(number, groups) {\n\treturn groups.reduce((accumulator, row) => accumulator + (row.get(number) > 0 ? 1 : 0), 0);\n}\n\n// get the min between its completion in rows, columns and squares.\nexport function getNumberValueCount(board, number) {\n\tconst rows = board.getIn(['choices', 'rows']);\n\tconst columns = board.getIn(['choices', 'columns']);\n\tconst squares = board.getIn(['choices', 'squares']);\n\treturn Math.min(getNumberOfGroupsAssignedForNumber(number, squares), Math.min(getNumberOfGroupsAssignedForNumber(number, rows), getNumberOfGroupsAssignedForNumber(number, columns)));\n}\n\nexport function generateGame(finalCount = 20) {\n\tconsole.log('generating');\n\t// get a filled puzzle generated\n\tconst solution = makePuzzle();\n\t// pluck values from cells to create the game\n\tconst { puzzle } = pluck(solution, finalCount);\n\t// initialize the board with choice counts\n\tconst board = makeBoard({ puzzle });\n\treturn {\n\t\tboard,\n\t\thistory: List.of(board),\n\t\thistoryOffSet: 0,\n\t\tsolution,\n\t};\n}\n\n\n\n// WEBPACK FOOTER //\n// ./pages/functions.js"],"sourceRoot":""}